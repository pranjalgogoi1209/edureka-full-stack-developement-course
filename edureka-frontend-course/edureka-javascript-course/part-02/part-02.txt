Edureka course day-39, class-28 (Javascript-02, Thursday, 15/02/2024)


In JavaScript, hoisting is a behavior where variable declarations are moved to the top of their scope during the compilation phase. This means variables declared using var can be used before they are declared, as they are "hoisted" to the top of their scope and initialized with undefined.

console.log(a); // Output: undefined
var a = 10;

Here, var a is hoisted to the top, so the code behaves as if it were:

var a;
console.log(a); // Output: undefined
a = 10;

However, variables declared with let or const are not hoisted in the same way. They are in a "temporal dead zone" (TDZ) from the start of the block until the declaration is encountered. Accessing them before the declaration results in a ReferenceError.

Example with let:

console.log(b); // ReferenceError: Cannot access 'b' before initialization
let b = 10;

This difference ensures that let and const provide safer and more predictable behavior compared to var.